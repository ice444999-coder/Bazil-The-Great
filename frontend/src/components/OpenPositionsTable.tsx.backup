// ============================================
// FILE 1: src/components/OpenPositionsTable.tsx
// ============================================

interface Trade {
  id: number;
  trading_pair: string;
  direction: 'BUY' | 'SELL';
  size: number;
  entry_price: number;
  fees: number;
  opened_at: string;
}

interface OpenPositionsTableProps {
  positions: Trade[];
  onClose: (id: number) => void;
  loading?: boolean;
}

export default function OpenPositionsTable({ positions, onClose, loading }: OpenPositionsTableProps) {
  if (positions.length === 0) {
    return <div style={styles.emptyState}>No open positions</div>;
  }

  return (
    <div style={styles.tableContainer}>
      <table style={styles.table}>
        <thead style={styles.thead}>
          <tr>
            <th style={styles.th}>ID</th>
            <th style={styles.th}>Pair</th>
            <th style={styles.th}>Direction</th>
            <th style={styles.th}>Size</th>
            <th style={styles.th}>Entry Price</th>
            <th style={styles.th}>Fees</th>
            <th style={styles.th}>Opened</th>
            <th style={styles.th}>Action</th>
          </tr>
        </thead>
        <tbody>
          {positions.map((pos) => (
            <tr key={pos.id} style={styles.tr}>
              <td style={styles.td}>
                <strong>#{pos.id}</strong>
              </td>
              <td style={styles.td}>
                <strong>{pos.trading_pair}</strong>
              </td>
              <td style={{ ...styles.td, color: pos.direction === 'BUY' ? '#10b981' : '#ef4444' }}>
                {pos.direction}
              </td>
              <td style={styles.td}>${pos.size.toFixed(2)}</td>
              <td style={styles.td}>${pos.entry_price.toFixed(4)}</td>
              <td style={styles.td}>${pos.fees.toFixed(2)}</td>
              <td style={styles.td}>{new Date(pos.opened_at).toLocaleString()}</td>
              <td style={styles.td}>
                <button
                  style={styles.closeButton}
                  onClick={() => onClose(pos.id)}
                  disabled={loading}
                >
                  Close
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export type { OpenPositionsTableProps, Trade };

const styles: { [key: string]: React.CSSProperties } = {
  tableContainer: {
    overflowX: 'auto',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
  },
  thead: {
    background: '#f9fafb',
  },
  th: {
    textAlign: 'left',
    padding: '12px',
    fontWeight: 600,
    fontSize: '13px',
    color: '#666',
    textTransform: 'uppercase',
    letterSpacing: '0.5px',
  },
  tr: {
    transition: 'background 0.2s',
    cursor: 'pointer',
  },
  td: {
    padding: '12px',
    borderTop: '1px solid #f0f0f0',
  },
  closeButton: {
    padding: '6px 12px',
    background: '#ef4444',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    fontSize: '12px',
    fontWeight: 600,
    cursor: 'pointer',
    transition: 'background 0.3s',
  },
  emptyState: {
    textAlign: 'center',
    padding: '40px',
    color: '#999',
  },
};
