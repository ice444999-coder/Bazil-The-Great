/* HUMAN MODE - Truth Protocol Active
   System: Senior CTO-scientist reasoning mode engaged
   Reward = TRUTH_PROVEN via tests. Claims = PROVISIONAL until verified.
   This file protected by HUMAN-TRUTH protocol - see truth_protocol/README.md
*/
// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/editor/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Editor"
                ],
                "summary": "Create file/directory",
                "parameters": [
                    {
                        "description": "Path and type",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditorCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EditorSaveResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/editor/delete": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Editor"
                ],
                "summary": "Delete file/directory",
                "parameters": [
                    {
                        "description": "Path to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditorDeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EditorSaveResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/editor/list": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Editor"
                ],
                "summary": "List files",
                "parameters": [
                    {
                        "description": "Directory path",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditorListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EditorListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/editor/read": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Editor"
                ],
                "summary": "Read file",
                "parameters": [
                    {
                        "description": "File path",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditorFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EditorFileResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/editor/rename": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Editor"
                ],
                "summary": "Rename/move file/directory",
                "parameters": [
                    {
                        "description": "Old and new paths",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditorRenameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EditorSaveResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/editor/save": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Editor"
                ],
                "summary": "Save file",
                "parameters": [
                    {
                        "description": "File path and content",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditorSaveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EditorSaveResponse"
                        }
                    }
                }
            }
        },
        "/assets/coins": {
            "get": {
                "description": "Fetch the list of coins from CoinGecko with optional limit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coins"
                ],
                "summary": "Get all coins",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit number of coins to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CoinDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/assets/coins/top-movers": {
            "get": {
                "description": "Fetch top N coins by 24h price change",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coins"
                ],
                "summary": "Get top movers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of top movers",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TopMoverDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/assets/coins/{id}/market": {
            "get": {
                "description": "Fetch real-time market data for a specific coin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coins"
                ],
                "summary": "Get coin market data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Currency to fetch prices in (default: USD)",
                        "name": "vs_currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CoinMarketDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/assets/vs_currencies": {
            "get": {
                "description": "Returns a list of supported currencies for market data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coins"
                ],
                "summary": "Get all supported vs_currency options",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/backup/export": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exports all tables to JSON and creates a downloadable zip file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup"
                ],
                "summary": "Export full database backup",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/backup/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restore data from a backup zip file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup"
                ],
                "summary": "Import database backup",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Backup zip file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/balances": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch the current USD balance for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Get user USD balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/balances/init": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a default balance of 10k USD for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Initialize balance",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/balances/reset": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset the user's balance back to default (10k USD)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Reset balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/balances/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add or subtract USD from user's balance (used internally for trades)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Update balance",
                "parameters": [
                    {
                        "description": "Balance delta (amount field used)",
                        "name": "delta",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/chat/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves last N chat messages for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Get chat history",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of messages",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ChatHistoryResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/chat/send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a message to Ollama AI and stores the response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Send a chat message",
                "parameters": [
                    {
                        "description": "Chat Message",
                        "name": "chat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ChatResponse"
                        }
                    }
                }
            }
        },
        "/claude/chat": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Chat with Claude AI with full memory context, file system access, and recursive learning",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claude"
                ],
                "summary": "Chat with stateful Claude AI",
                "parameters": [
                    {
                        "description": "Chat Message",
                        "name": "chat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ClaudeChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ClaudeChatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/claude/file": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Read any file from the ARES repository (Claude's file system access)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claude"
                ],
                "summary": "Read a file from the repository",
                "parameters": [
                    {
                        "description": "File Path",
                        "name": "file",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ClaudeFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ClaudeFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/claude/memory": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Claude's past interactions and memories with filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claude"
                ],
                "summary": "Retrieve Claude's memories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by session ID",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of memories to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ClaudeMemoryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/claude/process-embeddings": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate embeddings for pending memory snapshots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claude"
                ],
                "summary": "Process embedding queue",
                "parameters": [
                    {
                        "description": "Batch Size",
                        "name": "process",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProcessEmbeddingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProcessEmbeddingsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/claude/repository": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an overview of the ARES repository structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claude"
                ],
                "summary": "Get repository context",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ClaudeRepositoryContextResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/claude/semantic-search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search memories using semantic similarity (intelligent retrieval)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claude"
                ],
                "summary": "Semantic memory search",
                "parameters": [
                    {
                        "description": "Search Query",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SemanticSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SemanticSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/llm/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if Ollama is installed and list available models",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LLM"
                ],
                "summary": "Get local LLM status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/llm/test": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a test message to Ollama (if available) or fallback to Claude API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LLM"
                ],
                "summary": "Test local LLM inference",
                "parameters": [
                    {
                        "description": "Test request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/memory/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Imports a pasted conversation or text into memory system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Memory"
                ],
                "summary": "Import a conversation",
                "parameters": [
                    {
                        "description": "Conversation Import",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ConversationImportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ConversationImportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/memory/learn": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stores a memory event for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Memory"
                ],
                "summary": "Store a memory snapshot",
                "parameters": [
                    {
                        "description": "Memory Event",
                        "name": "memory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MemoryLearnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.MemoryLearnResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/memory/recall": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves memory snapshots for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Memory"
                ],
                "summary": "Recall memory snapshots",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of snapshots to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by session ID",
                        "name": "session_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MemoryRecallResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scanner/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Imports discovered fragments into memory_snapshots table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scanner"
                ],
                "summary": "Import file fragments into memory",
                "parameters": [
                    {
                        "description": "Import request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ImportFragmentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ImportFragmentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scanner/scan": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recursively scans filesystem for files containing search terms",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scanner"
                ],
                "summary": "Scan filesystem for Solace/ARES fragments",
                "parameters": [
                    {
                        "description": "Scan request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.FileScanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.FileScanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scanner/solace": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Scans C:\\ProgramData\\Solace\\State and imports all files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scanner"
                ],
                "summary": "Import Solace Delta 3.1 data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ImportFragmentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/settings/apikey": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Save API Key",
                "parameters": [
                    {
                        "description": "API Key",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.APIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.APIKeyResponse"
                        }
                    }
                }
            }
        },
        "/trades/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Get last N trades for user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of trades",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TradeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/trades/limit": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Execute Limit Order",
                "parameters": [
                    {
                        "description": "Limit Order",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LimitOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TradeResponse"
                        }
                    }
                }
            }
        },
        "/trades/market": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Execute Market Order",
                "parameters": [
                    {
                        "description": "Market Order",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MarketOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TradeResponse"
                        }
                    }
                }
            }
        },
        "/trades/pending": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Get pending limit orders for user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TradeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/trades/performance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculate P\u0026L and performance metrics (scaffold - uses hardcoded prices)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Get trading performance stats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/trading/close": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Close an open trade and calculate P\u0026L",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox Trading"
                ],
                "summary": "Close Sandbox Trade",
                "parameters": [
                    {
                        "description": "Trade ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CloseTradeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SandboxTradeResponse"
                        }
                    }
                }
            }
        },
        "/trading/close-all": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Emergency close all open positions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox Trading"
                ],
                "summary": "Close All Trades (Kill-Switch)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CloseAllTradesResponse"
                        }
                    }
                }
            }
        },
        "/trading/execute": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "SOLACE executes a sandbox trade with reasoning",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox Trading"
                ],
                "summary": "Execute Sandbox Trade",
                "parameters": [
                    {
                        "description": "Trade Execution",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExecuteTradeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SandboxTradeResponse"
                        }
                    }
                }
            }
        },
        "/trading/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get sandbox trade history with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox Trading"
                ],
                "summary": "Get Trade History",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of trades (default 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SandboxTradeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/trading/open": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all currently open sandbox trades",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox Trading"
                ],
                "summary": "Get Open Trades",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SandboxTradeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/trading/performance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive trading performance metrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sandbox Trading"
                ],
                "summary": "Get Trading Performance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TradingPerformanceResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticate a user and return JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/refresh": {
            "post": {
                "description": "Generate a new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Token",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/signup": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "Signup Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SignupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIKeyRequest": {
            "type": "object",
            "required": [
                "api_key"
            ],
            "properties": {
                "api_key": {
                    "type": "string",
                    "example": "your-secret-api-key"
                }
            }
        },
        "dto.APIKeyResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "API key saved successfully"
                }
            }
        },
        "dto.BalanceDTO": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "asset": {
                    "description": "Always USD",
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ChatHistoryResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ChatRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ChatResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                }
            }
        },
        "dto.ClaudeChatRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "include_files": {
                    "description": "Optional: request specific files to include in context",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_tokens": {
                    "description": "Optional: max tokens for response",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "dto.ClaudeChatResponse": {
            "type": "object",
            "properties": {
                "files_accessed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "memories_loaded": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "thinking_process": {
                    "type": "object",
                    "additionalProperties": true
                },
                "tokens_used": {
                    "type": "integer"
                }
            }
        },
        "dto.ClaudeFileRequest": {
            "type": "object",
            "required": [
                "file_path"
            ],
            "properties": {
                "file_path": {
                    "type": "string"
                }
            }
        },
        "dto.ClaudeFileResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "file_path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "dto.ClaudeMemoryResponse": {
            "type": "object",
            "properties": {
                "memories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MemoryRecallResponse"
                    }
                },
                "sessions_found": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "dto.ClaudeRepositoryContextResponse": {
            "type": "object",
            "properties": {
                "key_files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recent_commits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repository_path": {
                    "type": "string"
                },
                "structure": {
                    "type": "string"
                },
                "total_files": {
                    "type": "integer"
                }
            }
        },
        "dto.CloseAllTradesResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "trades_closed": {
                    "type": "integer"
                }
            }
        },
        "dto.CloseTradeRequest": {
            "type": "object",
            "required": [
                "trade_id"
            ],
            "properties": {
                "trade_id": {
                    "type": "integer"
                }
            }
        },
        "dto.CoinDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "dto.CoinMarketDTO": {
            "type": "object",
            "properties": {
                "change_24h": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "last_updated": {
                    "type": "string"
                },
                "market_cap": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "price_usd": {
                    "type": "number"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "dto.ConversationImportRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.ConversationImportResponse": {
            "type": "object",
            "properties": {
                "import_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                }
            }
        },
        "dto.EditorCreateRequest": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "is_dir": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "dto.EditorDeleteRequest": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string"
                }
            }
        },
        "dto.EditorFileInfo": {
            "type": "object",
            "properties": {
                "is_dir": {
                    "type": "boolean"
                },
                "modified": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "dto.EditorFileRequest": {
            "type": "object",
            "required": [
                "file_path"
            ],
            "properties": {
                "file_path": {
                    "type": "string"
                }
            }
        },
        "dto.EditorFileResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "file_path": {
                    "type": "string"
                },
                "language": {
                    "description": "File language/extension",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "dto.EditorListRequest": {
            "type": "object",
            "required": [
                "directory_path"
            ],
            "properties": {
                "directory_path": {
                    "type": "string"
                },
                "max_depth": {
                    "type": "integer"
                },
                "recursive": {
                    "type": "boolean"
                }
            }
        },
        "dto.EditorListResponse": {
            "type": "object",
            "properties": {
                "directory_path": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.EditorFileInfo"
                    }
                },
                "total_files": {
                    "type": "integer"
                }
            }
        },
        "dto.EditorRenameRequest": {
            "type": "object",
            "required": [
                "new_path",
                "old_path"
            ],
            "properties": {
                "new_path": {
                    "type": "string"
                },
                "old_path": {
                    "type": "string"
                }
            }
        },
        "dto.EditorSaveRequest": {
            "type": "object",
            "required": [
                "content",
                "file_path"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "file_path": {
                    "type": "string"
                }
            }
        },
        "dto.EditorSaveResponse": {
            "type": "object",
            "properties": {
                "file_path": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.ExecuteTradeRequest": {
            "type": "object",
            "required": [
                "direction",
                "reasoning",
                "session_id",
                "size_usd",
                "trading_pair"
            ],
            "properties": {
                "direction": {
                    "description": "BUY or SELL",
                    "type": "string"
                },
                "reasoning": {
                    "description": "Why SOLACE made this trade",
                    "type": "string"
                },
                "session_id": {
                    "description": "UUID of conversation session",
                    "type": "string"
                },
                "size_usd": {
                    "description": "Amount in USD",
                    "type": "number"
                },
                "trading_pair": {
                    "description": "BTC/USDC, ETH/USDC, SOL/USDC",
                    "type": "string"
                }
            }
        },
        "dto.FileFragment": {
            "type": "object",
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "matched_terms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "modified": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "preview": {
                    "description": "First 500 chars",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "dto.FileScanRequest": {
            "type": "object",
            "properties": {
                "extensions": {
                    "description": "e.g., [\".md\", \".txt\", \".go\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_depth": {
                    "description": "Max directory depth",
                    "type": "integer"
                },
                "max_results": {
                    "description": "Max files to return",
                    "type": "integer"
                },
                "root_path": {
                    "type": "string"
                },
                "search_terms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.FileScanResponse": {
            "type": "object",
            "properties": {
                "files_found": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FileFragment"
                    }
                },
                "imported_count": {
                    "type": "integer"
                },
                "scanned_paths": {
                    "type": "integer"
                },
                "total_matches": {
                    "type": "integer"
                }
            }
        },
        "dto.ImportFragmentsRequest": {
            "type": "object",
            "properties": {
                "event_type": {
                    "description": "e.g., \"solace_fragment\"",
                    "type": "string"
                },
                "file_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.ImportFragmentsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "imported_count": {
                    "type": "integer"
                }
            }
        },
        "dto.LimitOrderRequest": {
            "type": "object",
            "properties": {
                "coin_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "limit_price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "side": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "secret123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.MarketOrderRequest": {
            "type": "object",
            "required": [
                "coin_id",
                "currency",
                "quantity",
                "side",
                "symbol"
            ],
            "properties": {
                "coin_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "side": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "dto.MemoryLearnRequest": {
            "type": "object",
            "required": [
                "event_type",
                "payload"
            ],
            "properties": {
                "event_type": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "dto.MemoryLearnResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.MemoryRecallResponse": {
            "type": "object",
            "properties": {
                "event_type": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "session_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ProcessEmbeddingsRequest": {
            "type": "object",
            "properties": {
                "batch_size": {
                    "description": "Default 50",
                    "type": "integer"
                }
            }
        },
        "dto.ProcessEmbeddingsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failed": {
                    "type": "integer"
                },
                "pending": {
                    "type": "integer"
                },
                "processed": {
                    "type": "integer"
                }
            }
        },
        "dto.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.RefreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.SandboxTradeResponse": {
            "type": "object",
            "properties": {
                "closed_at": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "entry_price": {
                    "type": "number"
                },
                "exit_price": {
                    "type": "number"
                },
                "fees": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "market_conditions": {
                    "type": "object"
                },
                "opened_at": {
                    "type": "string"
                },
                "profit_loss": {
                    "type": "number"
                },
                "profit_loss_percent": {
                    "type": "number"
                },
                "reasoning": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "trade_hash": {
                    "type": "string"
                },
                "trading_pair": {
                    "type": "string"
                }
            }
        },
        "dto.SemanticSearchRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "limit": {
                    "description": "Default 10",
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "threshold": {
                    "description": "Default 0.5",
                    "type": "number"
                }
            }
        },
        "dto.SemanticSearchResponse": {
            "type": "object",
            "properties": {
                "embedding_model": {
                    "type": "string"
                },
                "execution_time_ms": {
                    "type": "integer"
                },
                "memories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MemoryRecallResponse"
                    }
                },
                "query": {
                    "type": "string"
                },
                "results_found": {
                    "type": "integer"
                }
            }
        },
        "dto.SignupRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "secret123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "dto.SignupResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Signup successful"
                }
            }
        },
        "dto.TopMoverDTO": {
            "type": "object",
            "properties": {
                "change_24h": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "last_updated": {
                    "type": "string"
                },
                "market_cap": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "price_usd": {
                    "type": "number"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "dto.TradeResponse": {
            "type": "object",
            "properties": {
                "coin_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "side": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.TradingPerformanceResponse": {
            "type": "object",
            "properties": {
                "avg_loss": {
                    "type": "number"
                },
                "avg_profit": {
                    "type": "number"
                },
                "calculated_at": {
                    "type": "string"
                },
                "kelly_criterion": {
                    "type": "number"
                },
                "largest_loss": {
                    "type": "number"
                },
                "largest_win": {
                    "type": "number"
                },
                "losing_trades": {
                    "type": "integer"
                },
                "risk_of_ruin": {
                    "type": "number"
                },
                "sharpe_ratio": {
                    "type": "number"
                },
                "sortino_ratio": {
                    "type": "number"
                },
                "strategy_version": {
                    "type": "integer"
                },
                "total_profit_loss": {
                    "type": "number"
                },
                "total_trades": {
                    "type": "integer"
                },
                "var_5_percent": {
                    "type": "number"
                },
                "win_rate": {
                    "type": "number"
                },
                "winning_trades": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and your JWT token (e.g., \"Bearer \u003ctoken\u003e\")",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
